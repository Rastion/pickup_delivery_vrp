{
    "entry_point": "pdptw_problem:PDPTWProblem",
    "default_params": {
      "instance_file": "instances/lc101.txt"
    },
    "problem_type": "Pickup-and-Delivery Problem with Time Windows",
    "description": "In the PDPTW, a fleet of vehicles with uniform capacity must perform both pickups and deliveries for customers within specified time windows. Each customer is associated with a demand, a service time, an earliest start time and a latest finish time. In addition, each pickup-delivery pair is linked (the pickup must occur before the corresponding delivery on the same route). Vehicles start and end at a common depot. The objectives are, in lexicographic order, to minimize total lateness (lateness at customers and upon returning home), minimize the number of trucks used, and minimize the total distance traveled.",
    "keywords": [
      "PDPTW",
      "pickup and delivery",
      "time windows",
      "vehicle routing"
    ],
    "data_format": {
      "instance_file": {
        "format": "A text file in the Li & Lim format. The file begins with the number of vehicles, the vehicle capacity, and some additional tokens. Then the depot coordinates are given. After some skipped tokens, the maximum horizon is provided. Next, for each customer, the following data are given: customer id, x-coordinate, y-coordinate, demand, earliest arrival, due date, service time, pickup order indicator, delivery order indicator. (A pickup is indicated by a pickup index of -1; the corresponding delivery is given by the delivery index.)"
      }
    },
    "decision_variables": {
      "routes": {
        "type": "list of lists of int",
        "description": "A list of routes, one per truck. Each route is a list of customer indices (0-indexed) representing the visiting order of that truck."
      }
    },
    "objective": {
      "type": "lexicographic minimization",
      "function": "Objective = total_lateness*1e12 + (nb_trucks_used)*1e6 + total_distance",
      "description": "The objective is lexicographic: first, minimize total lateness (which ideally should be zero); then, minimize the number of trucks used; and finally, minimize the total distance traveled. The total lateness is computed as the sum of lateness at each customer (if service ends after its latest allowed time) plus any lateness incurred when returning to the depot beyond the maximum horizon."
    },
    "solution_representation": "A dictionary with key 'routes' mapping to a list of routes (one per truck).",
    "compatible_optimizers": [
      "genetic_algorithm",
      "simulated_annealing",
      "particle_swarm",
      "tabu_search"
    ]
  }
  